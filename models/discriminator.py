import torch
import torch.nn as nn

class Discriminator(nn.Module):
    """
    Discriminator network used for adversarial training.
    Its role is to distinguish between real face images and those generated by the FaceSwapModel generator.
    If the generator is sucessful, it will produce images that the discriminator classifies as real.
    """
    def __init__(self, in_channels=3):
        """
        Args:
        - in_channels (int): number of channels in the input image (default: 3 for RGB)
        """
        super(Discriminator, self).__init__()
        #A sequential network of convolutional layers to progressively extract low to high level features and downsample the image
        self.net = nn.Sequential(
            nn.Conv2d(in_channels, 64, kernel_size=4, stride=2, padding=1),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(64, 128, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(128),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(256),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(256, 512, kernel_size=4, stride=2, padding=1),
            nn.BatchNorm2d(512),
            nn.LeakyReLU(0.2, inplace=True),
            nn.Conv2d(512, 1, kernel_size=4, stride=1, padding=0), #final convolutional layer outputs a single channel prediction map
        )
    def forward(self, x):
        """
        Forward pass:
        - x (tensor): (batch_size, 3, H, W) input image tensor
        Returns:
        - tensor: (batch_size, 1, H_out, W_out) prediction map where each value indicates the likelihood of the patch being real.
        """
        return self.net(x)